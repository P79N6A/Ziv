<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	 http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/aop 
     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
     http://www.springframework.org/schema/context 
     http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- 生成切面通知的bean -->
	<bean id="myAdvice" class="mvn.spring.aop.MyAdvice" />
	<!-- 生成MyService的bean -->
	<bean id="myService" class="mvn.spring.aop.MyService"></bean>

	<aop:config>
		<!-- 定义切面 引用通知的bean -->
		<aop:aspect id="my-aspect1" ref="myAdvice">
			<!-- 设置切入点 -->
			<aop:pointcut id="pointcut1" expression="execution(public * mvn.spring.aop.MyService.*(..))" />

			<!--指定before通知方法为,myAdvice.beforeMethod()，引用切入点pointcut1 -->
			<aop:before method="beforeMethod" pointcut-ref="pointcut1" />
			<!--指定after通知方法为,myAdvice.afterMethod()，引用切入点pointcut1 -->
			<aop:after method="afterMethod" pointcut-ref="pointcut1" />

			<!--指定afterReturning通知方法为,myAdvice.afterReturningMethod()，引用切入点pointcut1 -->
			<aop:after-returning method="afterReturningMethod" pointcut-ref="pointcut1" />
			<!--指定afterThrowing通知方法为,myAdvice.afterThrowingMethod()，引用切入点pointcut1 -->
			<aop:after-throwing method="afterThrowingMethod" pointcut-ref="pointcut1" />
			<!--指定around通知方法为,myAdvice.aroundMethod()，引用切入点pointcut1 -->
			<aop:around method="aroundMethod" pointcut-ref="pointcut1" />
		</aop:aspect>
	</aop:config>

</beans>
